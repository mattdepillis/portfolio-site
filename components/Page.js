import React, { Fragment } from 'react'
import Head from 'next/head'
import {
  NotionRenderer, Code, Collection, CollectionRow
} from 'react-notion-x'
import TweetEmbed from 'react-tweet-embed'
import Link from 'next/link'

import Sidebar from './Sidebar'

// TODO: create getCanonicalPageUrl and pass it to pageLink prop of NotionRenderer
// import { getCanonicalPageUrl } from '../lib/map-page-url'

const Page = (headTitle, {
  site,
  recordMap,
  error,
  pageId
}) => {
  console.log(headTitle, site )
  // const canonicalPageUrl = process.env.NODE_ENV === 'development'
  //   && getCanonicalPageUrl(site, recordMap)(pageId)

  // TODO: if a block is a tweet, we want to render that with static-tweets methods
  return (
    <Fragment>
      <Head>
        <title>{headTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* {canonicalPageUrl && (
          <>
            <link rel='canonical' href={canonicalPageUrl} />
            <meta property='og:url' content={canonicalPageUrl} />
            <meta property='twitter:url' content={canonicalPageUrl} />
          </>
        )} */}
      </Head>
      <Sidebar />
      <NotionRenderer
        recordMap={recordMap}
        fullPage={true}
        components={{
          // pageLink: ({
          //   href,
          //   ...props
          // }) => (
          //   <Link
          //     href={`${route || ''}${href}`}
          //   >
          //     <a {...props} />
          //   </Link>
          // ),
          pageLink: ({
            href,
            as,
            passHref,
            prefetch,
            replace,
            scroll,
            shallow,
            locale,
            ...props
          }) => {
            console.log('href', href)
            console.log('phref', passHref)
            console.log('props', props)
            return (
              <Link
                href={href}
                // href={`${route || ''}${href}`}
                as={as}
                passHref={passHref}
                prefetch={prefetch}
                replace={replace}
                scroll={scroll}
                shallow={shallow}
                locale={locale}
              >
                <a {...props} />
              </Link>
            )
          },
          code: Code,
          tweet: ({ id }) => (
            <TweetEmbed tweetId={id} />
          ),
          collection: Collection,
          collectionRow: CollectionRow
        }}
      />
    </Fragment>
  )
}

export default Page
