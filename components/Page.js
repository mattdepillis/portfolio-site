// core react + next imports
import React, { Fragment } from 'react'
import Head from 'next/head'
import Link from 'next/link'
import { useRouter } from 'next/router'

// react-notion-x core components
import {
  NotionRenderer, Code, Collection, CollectionRow, Equation
} from 'react-notion-x'

// other libs
import TweetEmbed from 'react-tweet-embed'
import HashLoader from 'react-spinners/HashLoader'

// functions
import { getCanonicalPageUrl, mapPageUrl } from '../lib/map-page-url'

// components
import { CenteredContainer } from '../styles/containers'
import Sidebar from './Sidebar'

const Page = ({
  headTitle,
  rootPath,
  page: { site, pageId, recordMap, error }
}) => {
  console.log('the record map', recordMap)
  console.log(Equation)

  // TODO: change this to show a spinner or some other animation while waiting for page content to load
  const router = useRouter()
  if (router.isFallback) return (
    <CenteredContainer>
      <HashLoader />
    </CenteredContainer>
  )

  const siteMapPageUrl = mapPageUrl(site, recordMap, new URLSearchParams(), pageId)

  const canonicalPageUrl = process.env.NODE_ENV !== 'development'
    && getCanonicalPageUrl(site, recordMap)(pageId)

  return (
    <Fragment>
      <Head>
        <title>{headTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {canonicalPageUrl && (
          <>
            <link rel='canonical' href={canonicalPageUrl} />
            <meta property='og:url' content={canonicalPageUrl} />
            <meta property='twitter:url' content={canonicalPageUrl} />
          </>
        )}
      </Head>
      <Sidebar />
      <NotionRenderer
        recordMap={recordMap}
        fullPage={true}
        mapPageUrl={siteMapPageUrl}
        components={{
          pageLink: ({
            href,
            as,
            passHref,
            prefetch,
            replace,
            scroll,
            shallow,
            locale,
            ...props
          }) => {
            return (
              <Link
                href={`${rootPath || ''}${href}`}
                as={as}
                passHref={passHref}
                prefetch={prefetch}
                replace={replace}
                scroll={scroll}
                shallow={shallow}
                locale={locale}
              >
                <a {...props} />
              </Link>
            )
          },
          code: Code,
          tweet: ({ id }) => (
            <TweetEmbed tweetId={id} />
          ),
          collection: Collection,
          collectionRow: CollectionRow,
          equation: Equation
        }}
      />
    </Fragment>
  )
}

export default Page
